import { GoogleGenerativeAI } from '@google/generative-ai';

let cachedKey = null;
let genAI = null;
let model = null;

const getApiKey = () => process.env.GEMINI_API_KEY || "AIzaSyCrCd7CjUyz6-dZ-TM06KoS-AWS0LF0iws";

export const getGeminiModel = () => {
  const apiKey = getApiKey();
  console.log('🔍 Checking Gemini API key:', apiKey ? `${apiKey.substring(0, 10)}...` : 'undefined');
  
  // const isDummy = !apiKey || /DUMMY_GEMINI_API_KEY_REPLACE_ME/i.test(apiKey) || /YOUR_GEMINI_API_KEY_HERE/i.test(apiKey);
  
  // if (isDummy) {
  //   console.log('⚠️  GEMINI_API_KEY not found or is dummy. OCR functionality will be limited.');
  //   return null;
  // }
  
  console.log('✅ Gemini API key found, initializing model...');
  
  if (cachedKey !== apiKey) {
    // Reinitialize client if key changed or first run
    cachedKey = apiKey;
    genAI = new GoogleGenerativeAI(apiKey);
    model = null;
  }
  if (!model) {
    // Use user's working model per key
    model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
  }
  return model;
};

export const summarizeReportWithGemini = async ({ title, documentType, ocrText, structuredData }) => {
  // Graceful fallback if key is missing/placeholder
  const apiKey = getApiKey();
  const isDummy = !apiKey || /DUMMY_GEMINI_API_KEY_REPLACE_ME/i.test(apiKey);
  const fallback = () => {
    const bullets = [];
    if (documentType) bullets.push(`Document type: ${documentType}`);
    if (structuredData?.diagnosis) bullets.push(`Diagnosis: ${structuredData.diagnosis}`);
    if (structuredData?.labValues?.length) bullets.push(`Contains ${structuredData.labValues.length} lab values`);
    return [
      `Summary for "${title || 'Report'}":`,
      ...bullets.map(b => `- ${b}`),
      '- This is an autogenerated summary because the Gemini API key is not configured. Replace GEMINI_API_KEY in backend .env to enable AI summaries.'
    ].join('\n');
  };

  const prompt = `You are a medical AI assistant. Summarize the following medical report for a non-technical reader.

Report Title: ${title || 'Untitled'}
Document Type: ${documentType || 'unknown'}

Structured Data (JSON):\n${structuredData ? JSON.stringify(structuredData, null, 2) : 'N/A'}

Extracted Text:\n${ocrText || 'N/A'}

Requirements:
- Provide a concise summary (5-8 bullet points)
- Highlight any abnormal or critical findings if present
- Suggest prudent next steps or questions to ask a doctor
- Avoid making a diagnosis; include a brief disclaimer
`;

  if (isDummy) {
    return fallback();
  }

  try {
    const m = getGeminiModel();
    const result = await m.generateContent(prompt);
    const text = result?.response?.text?.() || result?.response?.candidates?.[0]?.content?.parts?.[0]?.text;
    return text || fallback();
  } catch (err) {
    // Return a friendly fallback instead of throwing 500
    return fallback();
  }
};

// Force a real Gemini call (no fallback). Useful for key testing.
export const testGeminiPrompt = async (promptText) => {
  const apiKey = getApiKey();
  if (!apiKey || /DUMMY_GEMINI_API_KEY_REPLACE_ME/i.test(apiKey)) {
    throw new Error('GEMINI_API_KEY missing or placeholder');
  }
  const m = getGeminiModel();
  const result = await m.generateContent(promptText || 'Say hello');
  const text = result?.response?.text?.() || result?.response?.candidates?.[0]?.content?.parts?.[0]?.text || '';
  return text;
};

// Summarize directly from a local file (PDF/Image) using inline data
export const summarizeReportFromFile = async ({ filePath, mimeType, title }) => {
  const apiKey = getApiKey();
  const isDummy = !apiKey || /DUMMY_GEMINI_API_KEY_REPLACE_ME/i.test(apiKey);
  const fs = await import('fs');
  if (!filePath || !fs.existsSync(filePath)) {
    throw new Error('File not found');
  }
  const fileBuffer = fs.readFileSync(filePath);
  const base64 = fileBuffer.toString('base64');

  const prompt = `Summarize the medical document for a patient-friendly understanding.
Title: ${title || 'Report'}
Return:
- 5-8 concise bullet points
- Any abnormal/critical highlights
- Simple next steps/questions for doctor
- One-line disclaimer (not a diagnosis)`;

  if (isDummy) {
    return `Summary for "${title || 'Report'}" (fallback). File '${mimeType}', size ${fileBuffer.length} bytes.`;
  }

  try {
    const m = getGeminiModel();
    const result = await m.generateContent([
      { text: prompt },
      { inlineData: { data: base64, mimeType: mimeType || 'application/pdf' } }
    ]);
    const text = result?.response?.text?.() || result?.response?.candidates?.[0]?.content?.parts?.[0]?.text;
    return text || 'No summary generated.';
  } catch (e) {
    return `Could not summarize file: ${e.message}`;
  }
};


